import * as vscode from 'vscode';
import * as path from 'path';
import { GitService } from './services/gitService';
import { DiffService } from './services/diffService';
import { ReviewWebviewProvider } from './webview/reviewWebviewProvider';
import { StagedFilesProvider } from './providers/stagedFilesProvider';

export function activate(context: vscode.ExtensionContext) {
    console.log('AI Visual Code Review extension is now active!');

    // Initialize services
    const gitService = new GitService();
    const diffService = new DiffService();

    // Initialize providers
    const stagedFilesProvider = new StagedFilesProvider(gitService);
    const reviewWebviewProvider = new ReviewWebviewProvider(context, gitService, diffService);

    // Register tree data provider
    vscode.window.createTreeView('aiCodeReviewView', {
        treeDataProvider: stagedFilesProvider,
        showCollapseAll: true
    });

    // Register webview provider
    context.subscriptions.push(
        vscode.window.registerWebviewViewProvider('aiCodeReviewWebview', reviewWebviewProvider)
    );

    // Register commands
    const commands = [
        vscode.commands.registerCommand('aiCodeReview.openReview', async () => {
            await openReviewCommand(reviewWebviewProvider);
        }),

        vscode.commands.registerCommand('aiCodeReview.exportForAI', async () => {
            await exportForAICommand(gitService, diffService);
        }),

        vscode.commands.registerCommand('aiCodeReview.quickReview', async () => {
            await quickReviewCommand(gitService, diffService);
        }),

        vscode.commands.registerCommand('aiCodeReview.refreshFiles', () => {
            stagedFilesProvider.refresh();
        })
    ];

    context.subscriptions.push(...commands);

    // Auto-refresh on git changes if enabled
    const config = vscode.workspace.getConfiguration('aiCodeReview');
    if (config.get('autoRefresh', true)) {
        setupAutoRefresh(stagedFilesProvider);
    }

    // Status bar item
    const statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);
    statusBarItem.command = 'aiCodeReview.openReview';
    statusBarItem.text = '$(search-view-icon) AI Review';
    statusBarItem.tooltip = 'Open AI Code Review';
    statusBarItem.show();
    context.subscriptions.push(statusBarItem);

    // Update status bar based on git status
    updateStatusBar(statusBarItem, gitService);

    console.log('AI Visual Code Review extension activated successfully!');
}

async function openReviewCommand(reviewWebviewProvider: ReviewWebviewProvider) {
    try {
        // Create or show the webview panel
        await reviewWebviewProvider.createOrShowPanel();
        vscode.window.showInformationMessage('AI Code Review panel opened');
    } catch (error) {
        vscode.window.showErrorMessage(`Failed to open review: ${error}`);
    }
}

async function exportForAICommand(gitService: GitService, diffService: DiffService) {
    try {
        const workspaceFolder = vscode.workspace.workspaceFolders?.[0];
        if (!workspaceFolder) {
            vscode.window.showErrorMessage('No workspace folder found');
            return;
        }

        // Show progress
        await vscode.window.withProgress({
            location: vscode.ProgressLocation.Notification,
            title: 'Exporting for AI Review',
            cancellable: false
        }, async (progress) => {
            progress.report({ increment: 10, message: 'Getting staged files...' });

            const stagedFiles = await gitService.getStagedFiles(workspaceFolder.uri.fsPath);

            if (stagedFiles.length === 0) {
                vscode.window.showWarningMessage('No staged files found. Please stage your changes first.');
                return;
            }

            progress.report({ increment: 30, message: `Processing ${stagedFiles.length} files...` });

            // Generate review content
            const timestamp = new Date().toLocaleString();
            let content = `# 🔍 Code Review - ${timestamp}

**Project:** ${workspaceFolder.name}
**Generated by:** AI Visual Code Review Extension v1.0.0

## 📊 Change Summary

\`\`\`
${await gitService.getDiffStats(workspaceFolder.uri.fsPath)}
\`\`\`

## 📝 Files Changed (${stagedFiles.length} selected)

`;

            let processedCount = 0;
            for (const file of stagedFiles) {
                try {
                    progress.report({
                        increment: 50 / stagedFiles.length,
                        message: `Processing ${file}...`
                    });

                    content += `\n### 📄 \`${file}\`\n\n`;

                    // Add file type context
                    const ext = path.extname(file).toLowerCase();
                    const fileTypeMap: { [key: string]: string } = {
                        '.tsx': '**Type:** TypeScript React Component ⚛️\n\n',
                        '.ts': '**Type:** TypeScript Source File 📘\n\n',
                        '.js': '**Type:** JavaScript Source File 🟨\n\n',
                        '.jsx': '**Type:** React Component (JavaScript) ⚛️\n\n',
                        '.json': '**Type:** Configuration/Data File 📋\n\n',
                        '.md': '**Type:** Documentation 📖\n\n',
                        '.css': '**Type:** Stylesheet 🎨\n\n',
                        '.scss': '**Type:** Sass Stylesheet 🎨\n\n',
                        '.html': '**Type:** HTML Template 🌐\n\n',
                        '.py': '**Type:** Python Script 🐍\n\n',
                        '.sh': '**Type:** Shell Script 💻\n\n'
                    };
                    content += fileTypeMap[ext] || '**Type:** Source File 📄\n\n';

                    // Add diff
                    const diff = await gitService.getFileDiff(workspaceFolder.uri.fsPath, file);
                    content += diffService.generateEnhancedDiffMarkdown(diff);

                    processedCount++;
                } catch (error) {
                    console.error(`Error processing ${file}:`, error);
                    content += `**❌ Error:** Could not load diff for \`${file}\`\n\n`;
                }
            }

            // Add review checklist
            content += `---

## 🤖 AI Review Checklist

Please review these changes for:

### 🔍 Code Quality
- [ ] **Linting Compliance**: No unused imports/variables, proper formatting
- [ ] **Type Safety**: Proper typing throughout (TypeScript/JSDoc)
- [ ] **Best Practices**: Framework-specific conventions and patterns
- [ ] **Performance**: Efficient algorithms, proper memoization
- [ ] **Documentation**: Clear comments and function descriptions

### 🐛 Potential Issues
- [ ] **Runtime Errors**: Type mismatches, null/undefined handling
- [ ] **Logic Bugs**: Incorrect calculations, edge cases
- [ ] **Memory Leaks**: Cleanup in lifecycle methods, event listeners
- [ ] **Error Handling**: Proper try-catch blocks, user feedback
- [ ] **Accessibility**: ARIA labels, keyboard navigation, screen readers

### 🔒 Security & Data
- [ ] **Input Validation**: Sanitization, XSS prevention, SQL injection
- [ ] **Authentication**: Proper access controls and permissions
- [ ] **Privacy**: No sensitive data exposure in logs/client
- [ ] **Dependencies**: Updated packages, vulnerability checks

### 📱 UX/UI
- [ ] **Responsive Design**: Mobile/desktop/tablet compatibility
- [ ] **Loading States**: Proper feedback during async operations
- [ ] **Error Messages**: User-friendly error handling and recovery
- [ ] **Performance**: Fast loading, smooth animations

### 💡 Suggestions & Improvements
Please provide specific feedback on:
1. Code organization and structure improvements
2. Performance optimization opportunities
3. Security considerations and hardening
4. Testing coverage and strategies
5. Documentation and maintainability

---
*Generated by AI Visual Code Review Extension v1.0.0*
*Files processed: ${processedCount}/${stagedFiles.length} | Generated: ${new Date().toISOString()}*
`;

            progress.report({ increment: 10, message: 'Saving review file...' });

            // Write to file
            const reviewFile = vscode.Uri.file(path.join(workspaceFolder.uri.fsPath, 'AI_REVIEW.md'));
            await vscode.workspace.fs.writeFile(reviewFile, Buffer.from(content, 'utf8'));

            // Open the file
            const doc = await vscode.workspace.openTextDocument(reviewFile);
            await vscode.window.showTextDocument(doc);
        });

        vscode.window.showInformationMessage('AI review exported successfully!');
    } catch (error) {
        vscode.window.showErrorMessage(`Failed to export review: ${error}`);
    }
}

async function quickReviewCommand(gitService: GitService, diffService: DiffService) {
    try {
        const workspaceFolder = vscode.workspace.workspaceFolders?.[0];
        if (!workspaceFolder) {
            vscode.window.showErrorMessage('No workspace folder found');
            return;
        }

        const stagedFiles = await gitService.getStagedFiles(workspaceFolder.uri.fsPath);

        if (stagedFiles.length === 0) {
            vscode.window.showWarningMessage('No staged files found. Please stage your changes first.');
            return;
        }

        // Show quick summary
        const stats = await gitService.getDiffStats(workspaceFolder.uri.fsPath);
        const message = `📊 Quick Review Summary:
${stagedFiles.length} files staged
${stats}

Export full review?`;

        const choice = await vscode.window.showInformationMessage(
            message,
            { modal: true },
            'Export Full Review',
            'Cancel'
        );

        if (choice === 'Export Full Review') {
            await exportForAICommand(gitService, diffService);
        }
    } catch (error) {
        vscode.window.showErrorMessage(`Quick review failed: ${error}`);
    }
}

function setupAutoRefresh(stagedFilesProvider: StagedFilesProvider) {
    // Watch for git changes
    const watcher = vscode.workspace.createFileSystemWatcher('**/.git/index');

    watcher.onDidChange(() => {
        stagedFilesProvider.refresh();
    });

    watcher.onDidCreate(() => {
        stagedFilesProvider.refresh();
    });

    watcher.onDidDelete(() => {
        stagedFilesProvider.refresh();
    });
}

async function updateStatusBar(statusBarItem: vscode.StatusBarItem, gitService: GitService) {
    try {
        const workspaceFolder = vscode.workspace.workspaceFolders?.[0];
        if (!workspaceFolder) {
            statusBarItem.text = '$(search-view-icon) AI Review';
            return;
        }

        const stagedFiles = await gitService.getStagedFiles(workspaceFolder.uri.fsPath);
        if (stagedFiles.length > 0) {
            statusBarItem.text = `$(search-view-icon) AI Review (${stagedFiles.length})`;
            statusBarItem.backgroundColor = new vscode.ThemeColor('statusBarItem.prominentBackground');
        } else {
            statusBarItem.text = '$(search-view-icon) AI Review';
            statusBarItem.backgroundColor = undefined;
        }
    } catch (error) {
        console.error('Failed to update status bar:', error);
    }
}

export function deactivate() {
    console.log('AI Visual Code Review extension deactivated');
}
